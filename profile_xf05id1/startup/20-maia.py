from ophyd import (EpicsSignal, EpicsSignalRO)

from recordwhat import (RecordBase, _register_record_type,
                        FieldComponent as Cpt)


@_register_record_type('vsin')
class VsinRecord(RecordBase):
    'Autogenerated class'
    previous_value = Cpt(EpicsSignalRO, '.OVAL$', string=True)
    quoted_value = Cpt(EpicsSignalRO, '.QVAL$', string=True)
    simulation_mode = Cpt(EpicsSignal, '.SIMM')
    simulation_value = Cpt(EpicsSignal, '.SVAL$', string=True)

    # - display
    post_archive_monitors = Cpt(EpicsSignal, '.APST')
    post_value_monitors = Cpt(EpicsSignal, '.MPST')

    # - inputs
    current_value = Cpt(EpicsSignal, '.VAL$', string=True)
    input_specification = Cpt(EpicsSignal, '.INP$', string=True)
    sim_input_specifctn = Cpt(EpicsSignal, '.SIOL$', string=True)
    sim_mode_location = Cpt(EpicsSignal, '.SIML$', string=True)
    sim_mode_alarm_svrty = Cpt(EpicsSignal, '.SIMS')


@_register_record_type('vsout')
class VsoutRecord(RecordBase):
    'Autogenerated class'
    previous_value = Cpt(EpicsSignalRO, '.OVAL$', string=True)
    quoted_value = Cpt(EpicsSignalRO, '.QVAL$', string=True)
    simulation_mode = Cpt(EpicsSignal, '.SIMM')

    # - display
    post_archive_monitors = Cpt(EpicsSignal, '.APST')
    post_value_monitors = Cpt(EpicsSignal, '.MPST')

    # - inputs
    sim_mode_location = Cpt(EpicsSignal, '.SIML$', string=True)
    sim_output_specifctn = Cpt(EpicsSignal, '.SIOL$', string=True)
    sim_mode_alarm_svrty = Cpt(EpicsSignal, '.SIMS')

    # - output
    current_value = Cpt(EpicsSignal, '.VAL$', string=True)
    desired_output_loc = Cpt(EpicsSignal, '.DOL$', string=True)
    invalid_output_action = Cpt(EpicsSignal, '.IVOA')
    invalid_output_value = Cpt(EpicsSignal, '.IVOV$', string=True)
    output_mode_select = Cpt(EpicsSignal, '.OMSL')
    output_specification = Cpt(EpicsSignal, '.OUT$', string=True)


@_register_record_type('blog')
class BlogRecord(RecordBase):
    'Autogenerated class'
    blog_record_length = Cpt(EpicsSignal, '.RECLEN')
    blogd_data_path = Cpt(EpicsSignal, '.DTPATH$', string=True)
    blogd_subversion_revision = Cpt(EpicsSignal, '.SVNREV$', string=True)
    blogd_working_directory = Cpt(EpicsSignal, '.DMNCWD$', string=True)
    client_number = Cpt(EpicsSignal, '.CLIENT')
    current_egu_value = Cpt(EpicsSignal, '.VAL')
    current_number_of_clients = Cpt(EpicsSignal, '.CNCLI')
    current_run_group_name = Cpt(EpicsSignal, '.CRGRPN$', string=True)
    current_run_project_name = Cpt(EpicsSignal, '.CRPRJN$', string=True)
    discard_mode_flag = Cpt(EpicsSignal, '.DMFLG')
    facility_identifier = Cpt(EpicsSignal, '.FACID$', string=True)
    file_change_time_string = Cpt(EpicsSignal, '.CTIMS$', string=True)
    file_change_time_utime = Cpt(EpicsSignal, '.CTIME')
    last_val_monitored = Cpt(EpicsSignalRO, '.MLST')
    last_value_alarmed = Cpt(EpicsSignalRO, '.LALM')
    last_value_archived = Cpt(EpicsSignalRO, '.ALST')
    length_of_previous_block = Cpt(EpicsSignal, '.PREVLEN')
    local_timezone_name = Cpt(EpicsSignal, '.TMZONE$', string=True)
    logger_hostname = Cpt(EpicsSignal, '.LGHOST$', string=True)
    next_run_group_name = Cpt(EpicsSignal, '.RGRPN$', string=True)
    next_run_project_name = Cpt(EpicsSignal, '.RPRJN$', string=True)
    rate_of_blocks_being_written_per_sec = Cpt(EpicsSignal, '.RBLKW')
    rate_of_bytes_being_written_per_sec = Cpt(EpicsSignal, '.RBYTW')
    run_number = Cpt(EpicsSignal, '.RUNNO')
    run_sequence_number = Cpt(EpicsSignal, '.RUNSEQNO')
    run_time_seconds = Cpt(EpicsSignal, '.RUNTM')
    run_time_string = Cpt(EpicsSignal, '.RUNTS$', string=True)
    segment_number = Cpt(EpicsSignal, '.SEGNO')
    tag_sequence_number = Cpt(EpicsSignal, '.TAGSEQNO')
    total_number_of_blocks_written = Cpt(EpicsSignal, '.TNBLK')
    total_number_of_bytes_double = Cpt(EpicsSignal, '.TNBYT')
    total_number_of_bytes_high_32bits = Cpt(EpicsSignal, '.TNBHI')
    total_number_of_bytes_low_32bits = Cpt(EpicsSignal, '.TNBLO')
    total_number_of_clients = Cpt(EpicsSignal, '.TNCLI')
    unix_timeval_microseconds = Cpt(EpicsSignal, '.TVUSEC')
    unix_timeval_seconds = Cpt(EpicsSignal, '.TVSEC')
    unused_longword = Cpt(EpicsSignal, '.SPARE')
    version_number = Cpt(EpicsSignal, '.VERNO')

    # - alarms
    alarm_deadband = Cpt(EpicsSignal, '.HYST')
    high_alarm_limit = Cpt(EpicsSignal, '.HIGH')
    high_severity = Cpt(EpicsSignal, '.HSV')
    hihi_alarm_limit = Cpt(EpicsSignal, '.HIHI')
    hihi_severity = Cpt(EpicsSignal, '.HHSV')
    lolo_alarm_limit = Cpt(EpicsSignal, '.LOLO')
    lolo_severity = Cpt(EpicsSignal, '.LLSV')
    low_alarm_limit = Cpt(EpicsSignal, '.LOW')
    low_severity = Cpt(EpicsSignal, '.LSV')

    # - display
    archive_deadband = Cpt(EpicsSignal, '.ADEL')
    display_precision = Cpt(EpicsSignal, '.PREC')
    engineering_units = Cpt(EpicsSignal, '.EGU$', string=True)
    high_operating_range = Cpt(EpicsSignal, '.HOPR')
    low_operating_range = Cpt(EpicsSignal, '.LOPR')
    monitor_deadband = Cpt(EpicsSignal, '.MDEL')

    # - inputs
    input_specification = Cpt(EpicsSignalRO, '.INP$', string=True)


@_register_record_type('strnout')
class StrnoutRecord(RecordBase):
    'Autogenerated class'
    num_bytes_in_val_incl_null = Cpt(EpicsSignal, '.NBYTES')
    previous_value = Cpt(EpicsSignalRO, '.OVAL$', string=True)
    simulation_mode = Cpt(EpicsSignal, '.SIMM')

    # - display
    post_archive_monitors = Cpt(EpicsSignal, '.APST')
    post_value_monitors = Cpt(EpicsSignal, '.MPST')

    # - inputs
    sim_mode_location = Cpt(EpicsSignal, '.SIML$', string=True)
    sim_output_specifctn = Cpt(EpicsSignal, '.SIOL$', string=True)
    sim_mode_alarm_svrty = Cpt(EpicsSignal, '.SIMS')

    # - output
    current_value = Cpt(EpicsSignal, '.VAL$', string=True)
    desired_output_loc = Cpt(EpicsSignal, '.DOL$', string=True)
    invalid_output_action = Cpt(EpicsSignal, '.IVOA')
    invalid_output_value = Cpt(EpicsSignal, '.IVOV$', string=True)
    output_mode_select = Cpt(EpicsSignal, '.OMSL')
    output_specification = Cpt(EpicsSignal, '.OUT$', string=True)


@_register_record_type('genSub')
class GensubRecord(RecordBase):
    'Autogenerated class'
    old_subr_address = Cpt(EpicsSignalRO, '.OSAD')
    old_return_value = Cpt(EpicsSignalRO, '.OVAL')
    subr_return_value = Cpt(EpicsSignal, '.VAL')
    subroutine_address = Cpt(EpicsSignalRO, '.SADR')

    # - display
    display_precision = Cpt(EpicsSignal, '.PREC')
    version_number = Cpt(EpicsSignalRO, '.VERS')

    # - inputs
    input_link_a = Cpt(EpicsSignalRO, '.INPA$', string=True)
    input_link_b = Cpt(EpicsSignalRO, '.INPB$', string=True)
    input_link_c = Cpt(EpicsSignalRO, '.INPC$', string=True)
    input_link_d = Cpt(EpicsSignalRO, '.INPD$', string=True)
    input_link_e = Cpt(EpicsSignalRO, '.INPE$', string=True)
    input_link_f = Cpt(EpicsSignalRO, '.INPF$', string=True)
    input_link_g = Cpt(EpicsSignalRO, '.INPG$', string=True)
    input_link_h = Cpt(EpicsSignalRO, '.INPH$', string=True)
    input_link_i = Cpt(EpicsSignalRO, '.INPI$', string=True)
    input_link_j = Cpt(EpicsSignalRO, '.INPJ$', string=True)
    input_link_k = Cpt(EpicsSignalRO, '.INPK$', string=True)
    input_link_l = Cpt(EpicsSignalRO, '.INPL$', string=True)
    input_link_m = Cpt(EpicsSignalRO, '.INPM$', string=True)
    input_link_n = Cpt(EpicsSignalRO, '.INPN$', string=True)
    input_link_o = Cpt(EpicsSignalRO, '.INPO$', string=True)
    input_link_p = Cpt(EpicsSignalRO, '.INPP$', string=True)
    input_link_q = Cpt(EpicsSignalRO, '.INPQ$', string=True)
    input_link_r = Cpt(EpicsSignalRO, '.INPR$', string=True)
    input_link_s = Cpt(EpicsSignalRO, '.INPS$', string=True)
    input_link_t = Cpt(EpicsSignalRO, '.INPT$', string=True)
    input_link_u = Cpt(EpicsSignalRO, '.INPU$', string=True)
    subroutine_input_link = Cpt(EpicsSignalRO, '.SUBL$', string=True)

    # - output
    event_flag = Cpt(EpicsSignal, '.EFLG')
    link_flag = Cpt(EpicsSignal, '.LFLG')
    output_link_a = Cpt(EpicsSignalRO, '.OUTA$', string=True)
    output_link_b = Cpt(EpicsSignalRO, '.OUTB$', string=True)
    output_link_c = Cpt(EpicsSignalRO, '.OUTC$', string=True)
    output_link_d = Cpt(EpicsSignalRO, '.OUTD$', string=True)
    output_link_e = Cpt(EpicsSignalRO, '.OUTE$', string=True)
    output_link_f = Cpt(EpicsSignalRO, '.OUTF$', string=True)
    output_link_g = Cpt(EpicsSignalRO, '.OUTG$', string=True)
    output_link_h = Cpt(EpicsSignalRO, '.OUTH$', string=True)
    output_link_i = Cpt(EpicsSignalRO, '.OUTI$', string=True)
    output_link_j = Cpt(EpicsSignalRO, '.OUTJ$', string=True)
    output_link_k = Cpt(EpicsSignalRO, '.OUTK$', string=True)
    output_link_l = Cpt(EpicsSignalRO, '.OUTL$', string=True)
    output_link_m = Cpt(EpicsSignalRO, '.OUTM$', string=True)
    output_link_n = Cpt(EpicsSignalRO, '.OUTN$', string=True)
    output_link_o = Cpt(EpicsSignalRO, '.OUTO$', string=True)
    output_link_p = Cpt(EpicsSignalRO, '.OUTP$', string=True)
    output_link_q = Cpt(EpicsSignalRO, '.OUTQ$', string=True)
    output_link_r = Cpt(EpicsSignalRO, '.OUTR$', string=True)
    output_link_s = Cpt(EpicsSignalRO, '.OUTS$', string=True)
    output_link_t = Cpt(EpicsSignalRO, '.OUTT$', string=True)
    output_link_u = Cpt(EpicsSignalRO, '.OUTU$', string=True)

    # - sub
    bad_return_severity = Cpt(EpicsSignal, '.BRSV')
    init_routine_name = Cpt(EpicsSignalRO, '.INAM$', string=True)
    input_structure_a = Cpt(EpicsSignalRO, '.UFA$', string=True)
    input_structure_b = Cpt(EpicsSignalRO, '.UFB$', string=True)
    input_structure_c = Cpt(EpicsSignalRO, '.UFC$', string=True)
    input_structure_d = Cpt(EpicsSignalRO, '.UFD$', string=True)
    input_structure_e = Cpt(EpicsSignalRO, '.UFE$', string=True)
    input_structure_f = Cpt(EpicsSignalRO, '.UFF$', string=True)
    input_structure_g = Cpt(EpicsSignalRO, '.UFG$', string=True)
    input_structure_h = Cpt(EpicsSignalRO, '.UFH$', string=True)
    input_structure_i = Cpt(EpicsSignalRO, '.UFI$', string=True)
    input_structure_j = Cpt(EpicsSignalRO, '.UFJ$', string=True)
    input_structure_k = Cpt(EpicsSignalRO, '.UFK$', string=True)
    input_structure_l = Cpt(EpicsSignalRO, '.UFL$', string=True)
    input_structure_m = Cpt(EpicsSignalRO, '.UFM$', string=True)
    input_structure_n = Cpt(EpicsSignalRO, '.UFN$', string=True)
    input_structure_o = Cpt(EpicsSignalRO, '.UFO$', string=True)
    input_structure_p = Cpt(EpicsSignalRO, '.UFP$', string=True)
    input_structure_q = Cpt(EpicsSignalRO, '.UFQ$', string=True)
    input_structure_r = Cpt(EpicsSignalRO, '.UFR$', string=True)
    input_structure_s = Cpt(EpicsSignalRO, '.UFS$', string=True)
    input_structure_t = Cpt(EpicsSignalRO, '.UFT$', string=True)
    input_structure_u = Cpt(EpicsSignalRO, '.UFU$', string=True)
    old_subroutine_name = Cpt(EpicsSignalRO, '.ONAM$', string=True)
    output_structure_a = Cpt(EpicsSignalRO, '.UFVA$', string=True)
    output_structure_b = Cpt(EpicsSignalRO, '.UFVB$', string=True)
    output_structure_c = Cpt(EpicsSignalRO, '.UFVC$', string=True)
    output_structure_d = Cpt(EpicsSignalRO, '.UFVD$', string=True)
    output_structure_e = Cpt(EpicsSignalRO, '.UFVE$', string=True)
    output_structure_f = Cpt(EpicsSignalRO, '.UFVF$', string=True)
    output_structure_g = Cpt(EpicsSignalRO, '.UFVG$', string=True)
    output_structure_h = Cpt(EpicsSignalRO, '.UFVH$', string=True)
    output_structure_i = Cpt(EpicsSignalRO, '.UFVI$', string=True)
    output_structure_j = Cpt(EpicsSignalRO, '.UFVJ$', string=True)
    output_structure_k = Cpt(EpicsSignalRO, '.UFVK$', string=True)
    output_structure_l = Cpt(EpicsSignalRO, '.UFVL$', string=True)
    output_structure_m = Cpt(EpicsSignalRO, '.UFVM$', string=True)
    output_structure_n = Cpt(EpicsSignalRO, '.UFVN$', string=True)
    output_structure_o = Cpt(EpicsSignalRO, '.UFVO$', string=True)
    output_structure_p = Cpt(EpicsSignalRO, '.UFVP$', string=True)
    output_structure_q = Cpt(EpicsSignalRO, '.UFVQ$', string=True)
    output_structure_r = Cpt(EpicsSignalRO, '.UFVR$', string=True)
    output_structure_s = Cpt(EpicsSignalRO, '.UFVS$', string=True)
    output_structure_t = Cpt(EpicsSignalRO, '.UFVT$', string=True)
    output_structure_u = Cpt(EpicsSignalRO, '.UFVU$', string=True)
    process_subr_name = Cpt(EpicsSignal, '.SNAM$', string=True)

    # - wave
    no_in_a = Cpt(EpicsSignalRO, '.NOA')
    no_in_b = Cpt(EpicsSignalRO, '.NOB')
    no_in_c = Cpt(EpicsSignalRO, '.NOC')
    no_in_d = Cpt(EpicsSignalRO, '.NOD')
    no_in_e = Cpt(EpicsSignalRO, '.NOE')
    no_in_f = Cpt(EpicsSignalRO, '.NOF')
    no_in_g = Cpt(EpicsSignalRO, '.NOG')
    no_in_h = Cpt(EpicsSignalRO, '.NOH')
    no_in_i = Cpt(EpicsSignalRO, '.NOI')
    no_in_j = Cpt(EpicsSignalRO, '.NOJ')
    no_in_k = Cpt(EpicsSignalRO, '.NOK')
    no_in_l = Cpt(EpicsSignalRO, '.NOL')
    no_in_m = Cpt(EpicsSignalRO, '.NOM')
    no_in_n = Cpt(EpicsSignalRO, '.NON')
    no_in_o = Cpt(EpicsSignalRO, '.NOO')
    no_in_p = Cpt(EpicsSignalRO, '.NOP')
    no_in_q = Cpt(EpicsSignalRO, '.NOQ')
    no_in_r = Cpt(EpicsSignalRO, '.NOR')
    no_in_s = Cpt(EpicsSignalRO, '.NOS')
    no_in_t = Cpt(EpicsSignalRO, '.NOT')
    no_in_u = Cpt(EpicsSignalRO, '.NOU')
    no_in_vala = Cpt(EpicsSignalRO, '.NOVA')
    no_in_valb = Cpt(EpicsSignalRO, '.NOVB')
    no_in_valc = Cpt(EpicsSignalRO, '.NOVC')
    no_in_vald = Cpt(EpicsSignalRO, '.NOVD')
    no_in_vale = Cpt(EpicsSignalRO, '.NOVE')
    no_in_valf = Cpt(EpicsSignalRO, '.NOVF')
    no_in_valg = Cpt(EpicsSignalRO, '.NOVG')
    no_in_vali = Cpt(EpicsSignalRO, '.NOVI')
    no_in_valj = Cpt(EpicsSignalRO, '.NOVJ')
    no_in_valk = Cpt(EpicsSignalRO, '.NOVK')
    no_in_vall = Cpt(EpicsSignalRO, '.NOVL')
    no_in_valm = Cpt(EpicsSignalRO, '.NOVM')
    no_in_valn = Cpt(EpicsSignalRO, '.NOVN')
    no_in_valo = Cpt(EpicsSignalRO, '.NOVO')
    no_in_valp = Cpt(EpicsSignalRO, '.NOVP')
    no_in_valq = Cpt(EpicsSignalRO, '.NOVQ')
    no_in_valr = Cpt(EpicsSignalRO, '.NOVR')
    no_in_vals = Cpt(EpicsSignalRO, '.NOVS')
    no_in_valt = Cpt(EpicsSignalRO, '.NOVT')
    no_in_valu = Cpt(EpicsSignalRO, '.NOVU')
    no_in_valh = Cpt(EpicsSignalRO, '.NOVH')
    total_bytes_for_vala = Cpt(EpicsSignalRO, '.TOVA')
    total_bytes_for_valb = Cpt(EpicsSignalRO, '.TOVB')
    total_bytes_for_valc = Cpt(EpicsSignalRO, '.TOVC')
    total_bytes_for_vald = Cpt(EpicsSignalRO, '.TOVD')
    total_bytes_for_vale = Cpt(EpicsSignalRO, '.TOVE')
    total_bytes_for_valf = Cpt(EpicsSignalRO, '.TOVF')
    total_bytes_for_valg = Cpt(EpicsSignalRO, '.TOVG')
    total_bytes_for_vali = Cpt(EpicsSignalRO, '.TOVI')
    total_bytes_for_valj = Cpt(EpicsSignalRO, '.TOVJ')
    total_bytes_for_valk = Cpt(EpicsSignalRO, '.TOVK')
    total_bytes_for_vall = Cpt(EpicsSignalRO, '.TOVL')
    total_bytes_for_valm = Cpt(EpicsSignalRO, '.TOVM')
    total_bytes_for_valn = Cpt(EpicsSignalRO, '.TOVN')
    total_bytes_for_valo = Cpt(EpicsSignalRO, '.TOVO')
    total_bytes_for_valp = Cpt(EpicsSignalRO, '.TOVP')
    total_bytes_for_valq = Cpt(EpicsSignalRO, '.TOVQ')
    total_bytes_for_valr = Cpt(EpicsSignalRO, '.TOVR')
    total_bytes_for_vals = Cpt(EpicsSignalRO, '.TOVS')
    total_bytes_for_valt = Cpt(EpicsSignalRO, '.TOVT')
    total_bytes_for_valu = Cpt(EpicsSignalRO, '.TOVU')
    total_bytes_for_valh = Cpt(EpicsSignalRO, '.TOVH')
    type_of_a = Cpt(EpicsSignalRO, '.FTA')
    type_of_b = Cpt(EpicsSignalRO, '.FTB')
    type_of_c = Cpt(EpicsSignalRO, '.FTC')
    type_of_d = Cpt(EpicsSignalRO, '.FTD')
    type_of_e = Cpt(EpicsSignalRO, '.FTE')
    type_of_f = Cpt(EpicsSignalRO, '.FTF')
    type_of_g = Cpt(EpicsSignalRO, '.FTG')
    type_of_h = Cpt(EpicsSignalRO, '.FTH')
    type_of_i = Cpt(EpicsSignalRO, '.FTI')
    type_of_j = Cpt(EpicsSignalRO, '.FTJ')
    type_of_k = Cpt(EpicsSignalRO, '.FTK')
    type_of_l = Cpt(EpicsSignalRO, '.FTL')
    type_of_m = Cpt(EpicsSignalRO, '.FTM')
    type_of_n = Cpt(EpicsSignalRO, '.FTN')
    type_of_o = Cpt(EpicsSignalRO, '.FTO')
    type_of_p = Cpt(EpicsSignalRO, '.FTP')
    type_of_q = Cpt(EpicsSignalRO, '.FTQ')
    type_of_r = Cpt(EpicsSignalRO, '.FTR')
    type_of_s = Cpt(EpicsSignalRO, '.FTS')
    type_of_t = Cpt(EpicsSignalRO, '.FTT')
    type_of_u = Cpt(EpicsSignalRO, '.FTU')
    type_of_vala = Cpt(EpicsSignalRO, '.FTVA')
    type_of_valb = Cpt(EpicsSignalRO, '.FTVB')
    type_of_valc = Cpt(EpicsSignalRO, '.FTVC')
    type_of_vald = Cpt(EpicsSignalRO, '.FTVD')
    type_of_vale = Cpt(EpicsSignalRO, '.FTVE')
    type_of_valf = Cpt(EpicsSignalRO, '.FTVF')
    type_of_valg = Cpt(EpicsSignalRO, '.FTVG')
    type_of_valh = Cpt(EpicsSignalRO, '.FTVH')
    type_of_vali = Cpt(EpicsSignalRO, '.FTVI')
    type_of_valj = Cpt(EpicsSignalRO, '.FTVJ')
    type_of_valk = Cpt(EpicsSignalRO, '.FTVK')
    type_of_vall = Cpt(EpicsSignalRO, '.FTVL')
    type_of_valm = Cpt(EpicsSignalRO, '.FTVM')
    type_of_valn = Cpt(EpicsSignalRO, '.FTVN')
    type_of_valo = Cpt(EpicsSignalRO, '.FTVO')
    type_of_valp = Cpt(EpicsSignalRO, '.FTVP')
    type_of_valq = Cpt(EpicsSignalRO, '.FTVQ')
    type_of_valr = Cpt(EpicsSignalRO, '.FTVR')
    type_of_vals = Cpt(EpicsSignalRO, '.FTVS')
    type_of_valt = Cpt(EpicsSignalRO, '.FTVT')
    type_of_valu = Cpt(EpicsSignalRO, '.FTVU')
